//
//  MapViewController.swift
//  Foorun
//
//  Created by 김나희 on 9/28/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import MapKit
import UIKit

import SnapKit
import RxSwift

protocol MapDisplayLogic: AnyObject {
    func displayAnnotations(viewModel: Map.FetchAnnotations.ViewModel)
}

final class MapViewController: UIViewController, MapDisplayLogic {
    let locationManager = CLLocationManager()
    
    private var displayedAnntoations: [DisplayedAnnotation] = []
    var interactor: MapBusinessLogic?
    
    // MARK: - UI Component
    let mapView = MKMapView().then {
        $0.showsUserLocation = true
        $0.setUserTrackingMode(.followWithHeading, animated: true)
        $0.pointOfInterestFilter = .some(MKPointOfInterestFilter(including: [MKPointOfInterestCategory.restaurant, MKPointOfInterestCategory.university]))
    }
    
    let currentLocationButton = UIButton().then {
        $0.setImage(UIImage(named: AssetSet.Map.current), for: .normal)
    }
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setupVIP()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setupVIP()
    }
    
    // MARK: - Setup VIP
    private func setupVIP() {
        let viewController = self
        let interactor = MapInteractor()
        let presenter = MapPresenter()
        viewController.interactor = interactor
        interactor.mapPresenter = presenter
        presenter.viewController = viewController
    }
    
    // MARK: View lifecycle
    override func viewWillAppear(_ animated: Bool) {
        interactor?.loadAnnotations(request: Map.FetchAnnotations.Request(coordinate: self.mapView.centerCoordinate))
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        mapView.delegate = self
        locationManager.delegate = self
        locationManager.requestWhenInUseAuthorization()
        setupUI()
    }
    
    // MARK: - MapDisplayLogic
    func displayAnnotations(viewModel: Map.FetchAnnotations.ViewModel) {
        mapView.addAnnotations(viewModel.displayedAnnotations)
    }
    
    @objc func moveToCurrentLocation() {
        if let location = locationManager.location {
            mapView.setCenter(location.coordinate, animated: true)
        } else {
            configureSetting()
        }
    }
}

// MARK: - Setup UI
private extension MapViewController {
    func setupUI() {
        view.backgroundColor = .systemBackground
        
        setupMapView()
    }
    
    func setupMapView() {
        let initialCoordinate = CLLocationCoordinate2D(latitude: 37.2487996, longitude: 127.0777229)
        let span: MKCoordinateSpan = MKCoordinateSpan(latitudeDelta: 0.007, longitudeDelta: 0.007)
        
        view.addSubview(mapView)
        mapView.snp.makeConstraints {
            $0.top.leading.trailing.equalToSuperview()
            $0.bottom.equalTo(view.safeAreaLayoutGuide)
        }
        
        mapView.setRegion(MKCoordinateRegion(center: initialCoordinate, span: span), animated: true)
        mapView.register(RestaurantAnnotationView.self, forAnnotationViewWithReuseIdentifier: MKMapViewDefaultAnnotationViewReuseIdentifier)
        mapView.register(ClusterAnnotationView.self, forAnnotationViewWithReuseIdentifier: MKMapViewDefaultClusterAnnotationViewReuseIdentifier)
        
        setupCurrentButton()
    }
    
    func setupCurrentButton() {
        mapView.addSubview(currentLocationButton)
        currentLocationButton.snp.makeConstraints {
            $0.trailing.bottom.equalToSuperview().inset(20)
            $0.width.height.equalTo(60)
        }
        
        currentLocationButton.addTarget(self, action: #selector(moveToCurrentLocation), for: .touchUpInside)
    }
    
    func updateAnnotation(_ view: MKAnnotationView, _ annotation: DisplayedAnnotation) {
        if let view = view as? RestaurantAnnotationView {
            view.updateAnnotation()
        }
    }
}


// MARK: - CLLocationManager
extension MapViewController: CLLocationManagerDelegate {
    func locationManagerDidChangeAuthorization(_ manager: CLLocationManager) {
        checkCurrentLocationAuthorization(authorizationStatus: manager.authorizationStatus)
    }
    
    private func checkCurrentLocationAuthorization(authorizationStatus: CLAuthorizationStatus) {
        switch authorizationStatus {
        case .notDetermined:
            locationManager.desiredAccuracy = kCLLocationAccuracyBest
            locationManager.requestWhenInUseAuthorization()
            locationManager.startUpdatingLocation()
        case .restricted, .denied:
            break
        case .authorizedWhenInUse:
            locationManager.startUpdatingLocation()
        default:
            return
        }
    }
}


// MARK: - MapView Delegate
extension MapViewController: MKMapViewDelegate {
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        guard let annotation = annotation as? DisplayedAnnotation else { return nil }
        
        return RestaurantAnnotationView(annotation: annotation, reuseIdentifier: RestaurantAnnotationView.identifier)
    }
    
    func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView) {
        if view.annotation is MKUserLocation {
            mapView.deselectAnnotation(view.annotation, animated: false)
        } else if let annotation = view.annotation as? DisplayedAnnotation {
            updateAnnotation(view, annotation)
            presentBottomSheet(restaurantID: annotation.restaurantID)
        } else { // cluster
            let currentSpan = mapView.region.span
            print(currentSpan.latitudeDelta, currentSpan.longitudeDelta)
            let zoomSpan = MKCoordinateSpan(latitudeDelta: currentSpan.latitudeDelta / 2.0, longitudeDelta: currentSpan.longitudeDelta / 2.0)
            let zoomCoordinate = view.annotation?.coordinate ?? mapView.region.center
            let zoomed = MKCoordinateRegion(center: zoomCoordinate, span: zoomSpan)
            mapView.setRegion(zoomed, animated: true)
        }
    }
    
    func mapView(_ mapView: MKMapView, didDeselect view: MKAnnotationView) {
        if let annotation = view.annotation as? DisplayedAnnotation {
            updateAnnotation(view, annotation)
        }
    }
}


// MARK: - 화면전환
private extension MapViewController {
    func presentBottomSheet(restaurantID: Int) {
        let detailViewController = DetailViewController(vm: DetailViewModel(id: restaurantID))
        
        detailViewController.isDismiss
            .asDriver(onErrorJustReturn: false)
            .filter { $0 == true}
            .drive(with: self,
                   onNext: { this, isDismiss in
                this.mapView.deselectAnnotation(this.mapView.selectedAnnotations.first, animated: true)
            })
            .disposed(by: DisposeBag())
        
        if let sheet = detailViewController.sheetPresentationController {
            sheet.detents = [.medium(), .large()]
        }
        
        navigationController?.modalPresentationStyle = .pageSheet
        present(detailViewController, animated: true, completion: nil)
    }
    
    func configureSetting() {
        let alert = UIAlertController(title: "위치 권한 요청", message: "현 위치 정보를 불러오려면 위치 권한이 필요합니다.", preferredStyle: .alert)
        let settingAction = UIAlertAction(title: "설정", style: .default) { action in
            guard let url = URL(string: UIApplication.openSettingsURLString) else { return }
            if UIApplication.shared.canOpenURL(url) {
                UIApplication.shared.open(url)
            }
        }
        let cancelAction = UIAlertAction(title: "취소", style: .cancel)
        
        alert.addAction(settingAction)
        alert.addAction(cancelAction)
        
        present(alert, animated: true, completion: nil)
    }
    
}
